/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    public ListNode midN(ListNode root)
    {
        ListNode slow=root;
        ListNode fast=root;
        while(fast.next!=null && fast.next.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
    public ListNode reversePI(ListNode root) {
	    
	      ListNode prev = null;
	      ListNode curr = root;
	      while (curr != null) {
	        ListNode next = curr.next;
            curr.next = prev;
	        prev = curr;
	        curr = next;
	      }

	    return prev;
	    }
    public boolean isPalindrome(ListNode head) {
        
        if(head==null || head.next==null)
            return true;
        
        ListNode t2=head;
        ListNode mid=midN(head);
        ListNode midNext=mid.next;
        
        mid.next=null;
        ListNode t1= reversePI(midNext);
        
        while(t1!=null && t2!=null)
        {
            if(t1.val!=t2.val)
                return false;
            
            t1=t1.next;
            t2=t2.next;
        }
        return true;
    }
}