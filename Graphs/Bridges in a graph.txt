class Solution {
    private int timestamp;
    
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        /* Build Graph */
        Map<Integer, List<Integer>> graph = new HashMap<>();
        for (int i=0; i<n; i++)
            graph.put(i, new ArrayList<Integer>());
        
        for (List<Integer> edge: connections){
            int v0 = edge.get(0);
            int v1 = edge.get(1);
            graph.get(v0).add(v1);
            graph.get(v1).add(v0);
        }
        
        int[] parent = new int[n];
        int[] low = new int[n];
        int[] disc = new int[n];
        for (int i=0; i<n; i++)
            parent[i] = -1;
        
        boolean[] visited = new boolean[n];
        
        List<List<Integer>> res = new ArrayList<>();

        this.timestamp = 0;
        
        DFS(0, graph, visited, parent, low, disc, res);
                
        return res;
    }
    
    private void DFS(int x, Map<Integer, List<Integer>> graph, boolean[] visited, int[] parent, int[] low, int[] disc, List<List<Integer>> res) {
        visited[x] = true;
        low[x] = disc[x] = ++timestamp;
        // timestamp;
        // timestamp++;
        
        for (int y: graph.get(x)) {
            if (!visited[y]) {
                parent[y] = x;
                
                DFS(y, graph, visited, parent, low, disc, res);
                
                low[x] = Math.min(low[y], low[x]);
                if (disc[x] < low[y]) {
                    List<Integer> sol = new ArrayList<>();
                    sol.add(x);
                    sol.add(y);
                    res.add(sol);
                }
            } else {
                if (y != parent[x]) {
                    low[x] = Math.min(low[x], disc[y]);
                }
            }
        }
    }

}